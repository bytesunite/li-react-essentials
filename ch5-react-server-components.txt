Chapter 5 - React Server Components

* Creating a project with Next.js
* Using the App Router
* Building a server component
* Challenge: Creating a route
* Solution: Creating a route


Creating a project with Next.js
-----------------------------------
This chapter will explore Next.js, a popular React framework for the Web.
URL: https://nextjs.org

To create a new Next.js app open a terminal and enter the following npx command. Then it will provide many prompts to setup your app.

  > npx create-next-app@latest
  What is your project name? next-react-project
  Would you like to use TypeScript? No
  Would you like to use ESLint? No
  Would you like to use Tailwind CSS? Yes
  Would you like to use `src/` directory? Yes
  Would you like to use App Router? Yes
  Would you like to customize the default import alias? No

Then Next.js will install the packages, create a new project scaffold, and configure the project.

Change to the new project directory (next-react-project)

  > cd next-react-project

The instructor fails to mention this but Next.js collects data. To disable Next.js telemetry run the following command from your project directory.

  next-react-project/> npx next telemetry disable

To see the current status of npm telemetry run the following command from your project directory:

  next-react-project/> npx next telemetry status
  Status: Disabled


Finally, you can start up your Next.js development environment
which starts up a local server at localhost on port 3000.

  next-react-project/> npm run dev

If you open a web browser you will see the Next start page, which includes title, list and buttons:

   NEXT.js
   1. Get started by editing src/app/page.js.
   2. Save and see your changes instantly.

   (Deploy Now)   (Read our docs)

   Learn     Examples       Go to nextjs.org


When you explore the Next.js project structure you will find a "src/app" directory. This is where the instructor will focus on creating the app.
The instructor says all the files for this project will live in the "app" folder, which the instructor calls the "app router".
By placing our files in "app" we can create "routes" for the application.

The "layout.js" in "src/app" is the "meta data" of the project as well as the html. You will see a "RootLayout" component that returns an <html> tag with a single child <body> tag. The RootLayout component accepts a children prop to insert child elements into the <body> tag.

The "page.js" file in "src/app" is the main page for your project.
It has a component named "Home", representing the home page for your application. This page is rendered when you go to the "/" route in your web browser (http://localhost:3000/).


So let's get started.
First, remove the imported image, then strip out all code between the <main> tags in "src/app/home.js".
Inside the <main> tag create a simple <h1> to test out what happens when we modify and save this file.

[src/app/page.js]
  export default function Home(){
    <main className="flex min-h-screen flex-col items-center justify-between p-24">
      <h1>More React to come</h1>
    </main>
  }


If all went well you should now see our header when going to (http://localhost:3000/).



Using the App Router
----------------------------------
In a next.js project the "app" directory is where you specify your "routes".
Next.js uses a file-based routing structure that you can use.

This means whenever you create a new folder inside of the "src/app" folder, it creates a new route. Within this new folder you define a "page.js" file to specify your route page, which is the content you want to see when you navigate to that route.

  src/
    app/
      mountain/
        page.js

[page.js]
    export default function Page(){
      <main>
        <h1>Lift Status Info</h1>
      </main>
    }



Go to http://localhost:3000/mountain

You should see the page your just created in src/app/mountain/page.js

NOTE: The "app" folder is not always in the "src" folder, but you will still find routes in the "app" folder.


If you want a component rendered on every page you can use "src/app/layout.js".
The <Link> component is from Next.js, which allows you to render a specific componet when the page url matches the Link's "href" path.

[src/app/layout.js]
  ...
  import Link from 'next/link';
  ...
  function Header() {
    return (
      <header>
        <nav>
          <Link href='/' >Snowtooth Mountain</Link>
          <Link href='/mountain'>Mountain Info</Link>
        </nav>
      </header>
    );
  }
  ...


Now, with a Header component defined in "src/layout.js", you can add this component to the html at the bottom of the layout file within the RootLayout component.

    export default function RootLayout({ children }) {
      return (
        <html lang="en">
          <body
            className={`${geistSans.variable} ${geistMono.variable} antialiased`}
          >
            <Header />
            {children}
          </body>
        </html>
      );
    }


So new we should see the header with the two links on both the homepage "/" and at the mountain info page "/mountain".

Summary:
Routes are created by creating a folder in the "app" folder and creating a "page.js" file with the content to display for the page.
The exception is the homepage, where the "page.js" goes directly in the "app" folder without placing it in another route folder.
The <Link> component is used to navigate between routes.
If you want a component to display on every page, place the element in the RootLayout of "layout.js".



Building a server component
------------------------------------
By default Next.js automatically creates a "server component" from your code as you create routes in the "app" folder.
A "server component" can be rendered and cached on the server to optimize your application.
As a developer you don't need to manually configure your next.js app for server rendering as this is the default behavior.

If you look at the generated elements of your application you will see a bunch of "chunks" in the <head>. Next.js does its best to optimize your applications.

NOTE: You route components MUST have a default export.

The instructor talks about the application rendering a preview of HTML and interactive UI can be "hydrated" with JavaScript. This description makes no sense, the instructor is making too many assumptions.


The instructor creates a second route "hotels" with a default export in the page.js file.
For whatever reason the instructor is <div> happy, wrapping semantic code in useless containers.

src/
  app/
    hotels/
      page.js

[page.js]
    export default function Page() {
      <main>
        <div>
          <h1>Hotel Details</h1>
        </div>
      </main>
    }



Before moving on, the instructor shows how to improve styling using Tailwind.
Tailwind is a CSS Framework that uses a large collection of classes that provide a concise way to write CSS. Once you get familiar with the classes it can be helpful (p-1 is padding:4px, w-60 is width:240px, etc.)
URL: https://v3.tailwindcss.com/docs/installation

EX (CSS): style={{backgroundColor:'#ccc'}}
EX (Tailwind): className="bg-gray-300"


The instructor updates styling of Header component in "layout.js":
KEY: 
  * bg-slate-500       is a medium gray background color
  * py-4               16px of padding along the y axis (top/bottom)
  * px-4               16px of padding along the x axis (left/right)
  * mx-auto            auto margins on the x axis
  * container          sets the max-width to match min-width of current
                       breakpoint. Useful for fixed set of screen sizes.
                       Use mx-auto to center a container (it is not by default)

    function Header(){
      return (
        <header className="bg-slate-500 py-4">
          <div className="container mx-auto px-4">
            <nav className="flex items-center justify-between">
              <div className="flex items-center">
                <Link href="/">Snowtooth Mountain</Link>
              </div>
              <div>
                <Link href="/mountain">Mountain info</Link>
              </div>
              <div>
                <Link href="/hotels">Hotels</Link>
              </div>
            </nav>
          </div>
        </header>
      )
    }


This looks like a mess but so be it.
FYI: <Link> renders an anchor tag <a> in the DOM


Challenge: Creating a route
-------------------------------
The starting file can be found at branch 05_04b:

STARTING FILE URL:
https://github.com/LinkedInLearning/react-essential-training-5949338/tree/05_04b

README URL:
https://github.com/LinkedInLearning/react-essential-training-5949338/blob/05_04b/next-react-project/README.md

* Create a new route at /contact
* Render a Page Component at /contact
* Test to make sure this is rendering appropriately
* Extra Credit: Add a link to the contact route from the Header


NOTE: I chose to use my existing project rather than downloading the same content.


MY SOLUTION: (this challenge was easy)

  src/
    app/
      contact/
        page.js

[page.js]
   export default function Page() {
      return <h2>Contact</h2>;
   }

[src/app/layout.js]
  ...
  function Header(){
    ...
      <Link href="/contact">Contact</Link>
    ...
  }



Solution: Creating a route
-------------------------------------
An time you want to create a new route go the the "app" folder.
Add a "contact" folder.

  src/
    app/
      contact/
        page.js

Create a "page.js" file inside the contact folder.
Inside this file create a default export for a Page component.

[page.js]
   export default function Page() {
      return (
        <main>
          <h1>Contact Us</h1>
        </main>
      );
   }


For the extra credit go to the Header component in "src/app/layout.js"
Copy and paste an existing div and modify it for the contact link.

[src/app/layout.js]
  ...
  function Header(){
    ...
      <Link href="/contact">Contact Us</Link>
    ...
  }



The instructor wraps each individual route in <main> and extra <div> tags.
I'm not sure this is the best solution but so be it.
This seems like your are repeating yourself. I wonder why the RootLayout component doesn't just wrap the children in a <main> tag?

