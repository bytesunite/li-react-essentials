Chapter 6 - Asynchronous React in Next.js

* Fetching data in React applications
* Passing data as props
* Creating a client component
* Building a form
* Creating a server action


Fetching data in React Applications
----------------------------------------
Fetching data is a common thing to do in a server component.
To demonstrate the instructor opens a route for "mountain" and modifies the Page component in page.js.

1) Within "src/app/mountain/page.js", create an async function outside of the Page component. 
For clarity, "fetch()" is a Next.js wrapper around the browser fetch API that you may be used to.
The instructor provides an path to an api provided by "fly.dev".
(https://snowtooth-api-rest.fly.dev)

    [mountain/page.js]
      async function getData() {
        const res = await fetch('https://snowtooth-api-rest.fly.dev');
        return res.json();
      }

2) modify your Page component function to be asynchronous using the "async" keyword before the "function" keyword. This is required in order to use "await" inside your function component.

    export default async function Page(){
      const data = await getData();
      return (
        <main>
          <h1>Lift status info</h1>
        </main>
      )
    }   


This instructor's code so far looks like the "getData()" function is called every time this component rerenders.
All of this together looks like the following.

[mountain/page.js]
  async function getData() {
    const res = await fetch('https://snowtooth-api-rest.fly.dev');
    return res.json();
  }

  export default async function Page(){
    const data = await getData();
    return (
      <main>
        <h1>Lift State Info</h1>
        <div>{JSON.stringify(data)}</div>
      </main>
    )
  }


If all went well it spits out a ton of trail data on the page.

To help display this information in a more readable format the instructor creates a table.
NOTE: The instructor makes a mistake with trying to map the response.
      EX: data.data.allLifts.map()
      FIX: data.map()


  export default async function Page(){
    const data = await getData();
    return (
      <main>
        <h1>Lift State Info</h1>
        <Table>
          <thead>
            <tr>
              <th>Lift Name</th>
              <th>Current Status</th>
            </tr>
          </thead>
          <tbody>
            {data.map((lift) => (
              <tr key={lift.id}>
                <td>{lift.name}</td>
                <td>{lift.status}</td>
              </tr>
            ))}
          </tbody>
        <Table/>
      </main>
    )
  }


The instructor ends the lesson by stating that fetching data is best done in a server component and that it is typically faster because fetching is done on the server rather than on the client with client components.



Passing data as props
-------------------------------
By default a next.js app uses server components.
This means the HTML for the pages is rendered on the server.

If there is anything interactive in a Next.js app, it needs to be handled another way.

This is demonstrated with the "hotels" route.
The initial code is the same as the previous lesson where we create a function to fetch the data, then inside the component we call the asynchronous function.

Then, a separate component is created that will take in a prop for an individual hotel and render the name and capacity in a div.
The prop is sent from within the Page component to the new component element.

  src/
    app/
      hotels/
        page.js


[page.js]

  async function getData() {
    const res = await fetch('https://snowtooth-hotel-api.fly.dev');
    return res.json();
  }

  function HotelBlock({name, capacity}) {
    return (
      <div>
        <h2>{name}</h2>
        <p>{capacity}</p>
      </div>
    )
  }

  export default async function Page(){
    const data = await getData();

    return (
      <h1>Hotel info</h1>
      {data.map(hotel => (
        <HotelBlock 
          key={hotel.id} 
          name={hotel.name} 
          capacity={hotel.capacity} 
        />
      ))}
    );
  }


As you can see, the Page component invokes the asynchronous getData() function which makes a request to the server and the function return json.
The we can pass any part of this data to other components.
In the example above we loop through the data and grab the (key, name, capacity) for each item and pass this data as arguments to HotelBlock.
