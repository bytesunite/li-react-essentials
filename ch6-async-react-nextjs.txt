Chapter 6 - Asynchronous React in Next.js

* Fetching data in React applications
* Passing data as props
* Creating a client component
* Building a form
* Creating a server action


Fetching data in React Applications
----------------------------------------
Fetching data is a common thing to do in a server component.
To demonstrate the instructor opens a route for "mountain" and modifies the Page component in page.js.

1) Within "src/app/mountain/page.js", create an async function outside of the Page component. 
For clarity, "fetch()" is a Next.js wrapper around the browser fetch API that you may be used to.
The instructor provides an path to an api provided by "fly.dev".
(https://snowtooth-api-rest.fly.dev)

    [mountain/page.js]
      async function getData() {
        const res = await fetch('https://snowtooth-api-rest.fly.dev');
        return res.json();
      }

2) modify your Page component function to be asynchronous using the "async" keyword before the "function" keyword. This is required in order to use "await" inside your function component.

    export default async function Page(){
      const data = await getData();
      return (
        <main>
          <h1>Lift status info</h1>
        </main>
      )
    }   


This instructor's code so far looks like the "getData()" function is called every time this component rerenders.
All of this together looks like the following.

[mountain/page.js]
  async function getData() {
    const res = await fetch('https://snowtooth-api-rest.fly.dev');
    return res.json();
  }

  export default async function Page(){
    const data = await getData();
    return (
      <main>
        <h1>Lift State Info</h1>
        <div>{JSON.stringify(data)}</div>
      </main>
    )
  }


If all went well it spits out a ton of trail data on the page.

To help display this information in a more readable format the instructor creates a table.
NOTE: The instructor makes a mistake with trying to map the response.
      EX: data.data.allLifts.map()
      FIX: data.map()


  export default async function Page(){
    const data = await getData();
    return (
      <main>
        <h1>Lift State Info</h1>
        <Table>
          <thead>
            <tr>
              <th>Lift Name</th>
              <th>Current Status</th>
            </tr>
          </thead>
          <tbody>
            {data.map((lift) => (
              <tr key={lift.id}>
                <td>{lift.name}</td>
                <td>{lift.status}</td>
              </tr>
            ))}
          </tbody>
        <Table/>
      </main>
    )
  }


The instructor ends the lesson by stating that fetching data is best done in a server component and that it is typically faster because fetching is done on the server rather than on the client with client components.



Passing data as props
-------------------------------
By default a next.js app uses server components.
This means the HTML for the pages is rendered on the server.

If there is anything interactive in a Next.js app, it needs to be handled another way.

This is demonstrated with the "hotels" route.
The initial code is the same as the previous lesson where we create a function to fetch the data, then inside the component we call the asynchronous function.

Then, a separate component is created that will take in a prop for an individual hotel and render the name and capacity in a div.
The prop is sent from within the Page component to the new component element.

  src/
    app/
      hotels/
        page.js


[page.js]

  async function getData() {
    const res = await fetch('https://snowtooth-hotel-api.fly.dev');
    return res.json();
  }

  function HotelBlock({name, capacity}) {
    return (
      <div>
        <h2>{name}</h2>
        <p>{capacity}</p>
      </div>
    )
  }

  export default async function Page(){
    const data = await getData();

    return (
      <h1>Hotel info</h1>
      {data.map(hotel => (
        <HotelBlock 
          key={hotel.id} 
          name={hotel.name} 
          capacity={hotel.capacity} 
        />
      ))}
    );
  }


As you can see, the Page component invokes the asynchronous getData() function which makes a request to the server and the function return json.
The we can pass any part of this data to other components.
In the example above we loop through the data and grab the (key, name, capacity) for each item and pass this data as arguments to HotelBlock.


Creating a client component
----------------------------------
As we have learned the default behavior of Next.js is to create "server components". In the last lesson we showed how we fetched data from an online API using a server component & passed data to another component to render some UI.

However, "client components" are used for
* Interactivity - Client components can use state, effects, & event listeners.
  This means they provide immediate feedback to the user.
* Browser APIs - Client components have access to Browser APIs,
  like Geolocation or Local Storage.

NextJS Documentation - Client Components
https://nextjs.org/docs/app/building-your-application/rendering/client-components


First, we will create a solution that does NOT work.
Then explain why and fix it. The reason of course is that next creates "server components" by default and we need to take additional steps to create "client components.

This project has 5 hotel images in the "public/hotels" folder.
If you didn't start a new project you can find the images here:
https://github.com/LinkedInLearning/react-essential-training-5949338/tree/06_03b/next-react-project/public/hotels

Next.js has a <Image> component that you can use to load image files.
We will use this rather than <img>.

Lets get started.
1. Open hotels/page.js and import the Image component

[hotels/page.js]
  import Image from 'next/image';

2. Update the HotelBlock component to accept an 'id'
    prop. This will be used as a filename for a hotel image.
    The fetched data has an "id" for each hotel.
    
    function HotelBlock({name, capacity, id}) {
    }

3. create a new function to generate a path to the image.
   This function will be used as a "loader" for the Image component.
   The Image component has a "src" property that we will destructure
   and use the value in this function.
   The images of the hotels are at the path like "public/hotels/01.jpeg"

    function HotelBlock({name, capacity, id}) {
      const imageLoader = ({src}) => {
        return `./hotels/${src}.jpeg`;
      }
    }

4. Add an Image tag to the HotelBlock component. This next.js component has a "loader" attribute where you can specify the imageLoader function.
The specified function will get access to attributes of the Image tag,
and this is why in step 3 we destructured the "src" prop.
The id of a hotel is provided as the value to the "src" prop.

    function HotelBlock({name, capacity, id}) {
      const imageLoader = ({src}) => {
        return `./hotels/${src}.jpeg`;
      }

      return (
        <div>
          <h2>{name}</h2>
          <p>{capacity}<p>
          <Image src={id} width={300} height={300} loader={imageLoader} />
        </div>
      )
    }

5. Update the <HotelBlock> tag in the Page component to accept an "id" attribute that takes the hotel.id as its value.

    export default async function Page() {
      const data = await getData();
      
      return (
        <div>
          <h1>Hotel info</h1>
          {data.map(hotel => (
            <HotelBlock 
              key={hotel.id} 
              name={hotel.name} 
              capacity={hotel.capacity} 
              id={hotel.id} 
            />
          ))}
        </div>
      );
    }



At this point we are attempting to load images in the Next.js application.
An ERROR is thrown saying functions cannot be passed directly to client components.
It complains about the Image "loader" attribute.

The instructor says this error message is due to the fact that the <HotelBlock> component needs to be a "client component" to work.

The solution is to 
1. grab the HotelBlock component and put it into its own file and make the component the default export.
2. remove the import for Image in the Page component. Put it in the other file.
3. On the first line of the HotelBlock component file write "use client".
   This is needed for any activity such as button clicks, trying to look in the "public" directory, browser APIs like Geolocation or LocalStorage
   
Finally import the HotelBlock component from the new file.

[src/app/hotels/HotelBlock.js]
  "use client"
  import Image from 'next/image';

  export default function HotelBlock({name}, {capacity}, {id}){
    // same as before
  }


[src/app/hotels/page.js]
  import HotelBlock from './HotelBlock.js'

  // same as before



NOTE: When you use the Next.js Image component an error is thrown if you do not specify a (width, height) attribute with a numeric value.
Even when you do you can soft warning saying it has width or height modified but not the other.



Building a form
-------------------
Earlier in the course a "contact" route was created with a single h1.
This lesson will create a form for the contact page.
There is nothing special about Next.js in this lesson, its just a form that uses Tailwind CSS.

[src/app/contact/page.js]
    export default function Page() {
      return (
        <main>
          <h1>Contact</h1>
          <form>
            <div>
              <label htmlFor="email">
                Email
              </label>
              <input id="email" type="email" name="email" required />
            </div>
            <div>
              <label htmlFor="message">Message</label>
              <textarea id="message" name="message" rows="4" required>
              </textarea>
            </div>
            <button type="submit">
              Send Message
            </button>
          </form>
        </main>
      );
    }


This is a lot of code but it is a simple contact form with 2 inputs and a submit button.

Next, add some basic CSS styling with Tailwind.
The Tailwind term "md" is short for "medium" for dimensions (sm, md, lg) etc.
And "mx" is margin along x axis, "mb" is bottom margin, "p" is padding.

    <main className="max-w-md mx-auto p-6 bg-white shadow-md rounded-md">
      <h1 className="text-2xl font-bold text-center mb-6">
      <form className="space-y-4">
        ...
        <label className="block text-sm font-medium text-gray-700" ...>
        <input className="border border-gray-300 focus:ring-2" focus:ring-blue-500 focus:border-blue-500" ...>
        ...
                <label className="block text-sm font-medium text-gray-700" ...>
        <input className="border border-gray-300 focus:ring-2" focus:ring-blue-500 focus:border-blue-500" ...>
        ...
        <button className="text-white bg-blue-600 rounded-md p-3" ...>
        ...

