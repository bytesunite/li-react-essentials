Chapter 4 - Handling State in a React Project

 * Destructuring arrays
 * Understanding the useState hook
 * Toggling state with a button
 * Handling state with nested components
 * Managing state with useReducer
 * Working with the useEffect hook


Destructuring arrays
---------------------------------
The lesson starts out by creating a simple array of strings and accessing them by index.

    const animals = ['giraffe', 'zebra', 'bear'];

    console.log(animals[0]);  // giraffe

We can also take advantage of JavaScript destructuring by extracting values from the array into variables.

    const animals = ['giraffe', 'zebra', 'bear'];
    const [firstAnimal] = animals;
    console.log(firstAnimal); // giraffe

You can destructure the array by position from left to right.

    const animals = ['giraffe', 'zebra', 'bear'];
    const [firstAnimal, secondAnimal, thirdAnimal] = animals;
    console.log(firstAnimal); // giraffe
    console.log(secondAnimal); // zebra
    console.log(thirdAnimal); // bear

It is also possible to skip over elements with commas

    const animals = ['giraffe', 'zebra', 'bear'];
    const [, ,thirdAnimal] = animals;
    console.log(firstAnimal); // undefined
    console.log(secondAnimal); // undefined
    console.log(thirdAnimal); // bear


The instructor does not cover the rest/spread operator (...) which is used to group multiple items and then expand them. This can be helpful in React props. The instructor may or may not cover this later.
Both rest and spread use the same operator (...) but have separate purposes.
In the example "rest" can be any variable name but a common convention is to use this name.

    const animals = ['giraffe', 'zebra', 'bear'];

    // rest operator will group items together
    const [firstAnimal, ...rest] = animals;

    console.log(firstAnimal);  // giraffe
    console.log(rest); // ['zebra', 'bear']

    // spread operator will expand items from a collection
    const [secondAnimal, thirdAnimal] = [...rest];

    console.log(secondAnimal); // zebra
    console.log(thirdAnimal);  // bear



Understanding the useState Hook
------------------------------------------
The first step to using state is to import the useState hook from React.
This function is used to update the state of the application.

    import { useState } from 'react';


Next, you will create some app state. 
The instructor collapses all components in VSCode except the App component, which is the focus of demonstrating state.
When invoking the "useState()" function, it returns an array of 2 elements, an undefined value and a function. 
Additionally you can provide an argument to useState() to set an initial value that will be set for the variable that is returned.
In the last lesson you learned about destructuring an Array so we can define variables for each array item.

Inside the App component a new state variable "status" and setter function "setStatus" is created from the useState hook. An initial value of "Open" is set. A console.log(status) will show "Open".

The "status" state variable is meant for reading the current value. The setter function (setStatus) is meant to update the state variable. 
NOTE: The common convention is to name your setter by beginning with the word "set".

The instructor uses an <h1> for the status message but this doesn't make sense because we already have one in the Header component.
I used a <p> tag instead.

  function App(){
    const [status, setStatus] = useState("Open");
    console.log(status);
    return (
      <>
        <p>The restaurant is currently {status}</p>
        <Header name='Jane' year={new Date().getFullYear()} />
        <Main dishes={dishObjects} />
      </>
    )
  }


So at this point we can see the restaurant is "Open". However, currently we are not changing the value so the instructor shows how to add a <button> to change the status state variable value to "Closed" when the button is clicked. The "onClick()" attribute is given an arrow function and within it "setStatus" is called with a new value of "Closed".
Clicking the button more than once does nothing. 

  function App(){
    const [status, setStatus] = useState("Open");
    console.log(status);
    return (
      <>
        <p>The restaurant is currently {status}</p>
        <button onClick={() => setStatus('Closed')} >
          Close Restaurant
        </button>
        <Header name='Jane' year={new Date().getFullYear()} />
        <Main dishes={dishObjects} />
      </>
    )
  }


The instructor did not write the code to toggle the value between Open/Closed in this lesson (see the next lesson for this).



Toggling State with a button
----------------------------------------------
Currently we can click the button to change the status state from "Open" to "Closed". Clicking it more than once does nothing.
The instructor addresses this by showing how we can toggle the state using a button click.

The instructor's first solution is to create another button.

    ...
    <button onClick={() => setStatus('Open')}>Open Restaurant</button>
    <button onClick={() => setStatus('Closed')}>Close Restaurant</button

Then the instructor shows how to do this with a single button.
A few things will change. The initial state is set to false.
Then we can use the value of the status state to update both the paragraph informing us if the restaurant is open/closed and we can also update the button by toggling the text.

  ...  
  return (
    <>
      <p>The restaurant is currently {status ? 'Open' : 'Closed'}.</p>
      <button onClick={() => setStatus(!status)} >
        {status ? 'Close' : 'Open'} Restaurant
      </button>
      <Header name='Jane' year={new Date().getFullYear()} />
      <Main dishes={dishObjects} />
    </>
  )



Handling state with nested components
-----------------------------------------
In a React project typically you "lift state" to the highest component, eliminating the number of useState() calls in smaller child components. When you do this it makes it easier for child components to access state and easier to maintain state for the application.

The instructor suggests creating and managing state in the root component such as the App component. You can then pass state down to child components as "props".

The first example shows how the "state" state is passed down from the App component to the child component named Main by using a prop.
1. Add an attribute to the Main tag "openStatus={status}"
   This will pass the "status" state as a prop to the Main component
2. Within the Main component destructure the "openStatus" prop
   Then use it inside component's h2 tag to display the state.

  function Main({dishes, openStatus}) {
    return (
      <>
        <h2>
          Welcome to this amazing restaurant. {openStatus ? 'Open', 'Closed'}
        </h2>
        <main>
          ...
        </main>
      </>
    )
  }


  function App(){
    const [status, setStatus] = useState(true);
    return (
      <>
        <Header name="Jane" year={new Date().getFullYear()} />
        <Main dishes={dishObjects} openStatus={status} />
      </>
    )
  }



After doing this, you will notice the current "status" state is available inside of a child component. When the parent (App) updates the state, it gets passed down as a prop to the child component (Main) and both App and Main render the changes to the DOM.

Just like you can pass the current state value as a prop to a child component, you can also pass the state setter function as a prop.
For example, if you want to allow a child component to update state that is managed in a parent component.

1. pass the setter function (don't invoke it, just send the function)
2. invoke the setter from within the child with something like a button click

  <Main dishes={dishObjects} openStatus={status} onStatus={setStatus} />


  function Main({dishes, openStatus, onStatus}) { 
    return (
      <>
        <button onClick={() => onStatus(!openStatus)}>
          {openStatus ? 'Close' : 'Open'} the Restaurant
        </button>
        <h2>
          Welcome to our restaurant {openStatus ? 'Open' : 'Closed'}
        </h2>
        
        <main>
          <img src={chef} height={200} alt="Smiling Restaurant Chef" />
          <ul style={{listStyleType:'none'}}>
            {dishes.map(({id, title}) => <li key={id}>{title}</li>)}
          </ul>
        </main>
      </>
    );


The instructor passed the value true to close the restaurant from the Main component. I implemented the same toggle ability as the parent component (App).
Either way, this shows how a child component can update the application state.



Managing State With useReducer
--------------------------------------------
This lesson takes a look at an alternative way to manage state for your app with the "useReducer" hook.

The first step is to import the "useReducer" hook.

    [App.jsx]
        import { useState, useReducer } from 'react';
        ...

Next, we can removed the import of useState, and comment out or remove the line for initializing the "status" state with useState.
We will refactor this code.

    [App.jsx]
        import { useReducer } from 'react';
        ...
        function App() {
          // const [status, setStatus] = useState(true);
          ...
        }


The "useReducer" hook returns an array of 2 items.
 * the state variable, 
 * a function known as a "dispatcher" which lets you 
   update the state to a different value and trigger a re-render.

The first argument to "useReducer()" is a reducer function, which takes the state as an arguent and the function specifies how the state gets updated.
The second argument is the initial state value.

In the first example, the instructor provides the reducer function directly inside of the useReducer hook. However, you can create reducer function in the App component and provide the name of the function to useReducer.
EX: function myReducer(){...}    useReducer(myReducer, true)

    function App() {
      const [status, dispatch] = useReducer((status)=>!status, true);
    }

Now when we want to update state we can provide the "dispatch" function.
Here we update the <button> "onClick", and the Main attribute "onStatus".
After doing this the app works the same as it did with useState, but now it is using the useReducer() hook.


    function App() {
      const [status, dispatch] = useReducer((status)=>!status, true);

      return (
        ...
        <button onClick={dispatch}>
          {status : 'Close' : 'Open'} {" "}
          Restaurant
        </button>
        ...
        <Main dishes={dishObjects} openStatus={status} onStatus={dispatch} />
      )
    }

However, you are not stuck with a name "dispatch" for the function name.
So you can rename this to help describe it's purpose.
After doing this, update your code with the correct name.
This instructor uses "toggle" but this is not descriptive on WHAT it is toggling. I chose to call it "toggleStatus", which is a little better.

  const [status, toggleStatus] = useReducer((status)=>!status, true);



Compare with useState:
Previously, when using the useState hook, our onClick handler looked a bit different because we called the setter function "setStatus" inside of a callback:

    // useState
    <button onClick={()=> setStatus(!status)} >
      ...


The instructor mentions 
 * useReducer() allows for more complex state management 
   but fails to show an example of this.
 * useReducer() allows you to simply pass the function name
   instead of providing logic inside of the likes of onClick.

However, the second point doesn't make sense.
With useState, you can still separate the logic to a function and then provide this handler function to onClick;

  function App() {
    const [status, setStatus] = useState(true);

    function statusClickHandler {
      setStatus(!status);
    }

    return (
      ...
      <button onClick={statusClickHandler} ...
    )
  }



Working with the useEffect hook
----------------------------------------
The useEffect() hook can be tricky because it is not related to a component rendering. So things like console messages, loading data, working with animations, can benefit from use effect.

The first step is importing this hook

    import {useReducer, useEffect}

Then we can initialize useEffect in the body of the component.
The useEffect() hook does not return a value like useState() or useReducer().

    function App() {
      const [status, toggleStatus] = useReducer((status)=>!status, true);

      useEffect(()=>{
        console.log(`The restaurant is ${status ? 'Open', 'Closed'}.`);
      });

      return (
        ...
      );
    }


Go ahead and open a web browser console and you will see the console.log() message prints "The restaurant is Open" to the console after the component renders. If you clicking a button this triggers and re-render. After the render useEffect() is run again. The effect will run after every re-render.

[Console]
  The restaurant is Open
  The restaurant is Closed   // after you click a button

The default behavior of useEffect() is to run every time the component renders. Specifically it will execute AFTER the component render cycle, which the instructor does not talk about.
When we first open this application in a web browser the component is rendered to the DOM, then useEffect will run. When you click a button it changes the "status" state, which forces a re-render and again useEffect() will execute again AFTER rendering completes.

ATTENTION: The instructor does not do a good job of describing useEffect. The description is that the default bevahior is to render when the state changes. This isn't technically correct. In this app changing the "status" state will force a re-render, which will trigger useEffect when the component finishes rendering. However, any re-render will trigger useEffect().

The useEffect() hook accepts an argument known as a "dependency" array. This helps determine WHEN the effect is invoked.

To make useEffect() run only ONCE, you can provide a second argument, an empty array. This means after the first render it will no longer execute for future re-renders.

      useEffect(()=>{
        console.log(`The restaurant is ${status ? 'Open', 'Closed'}.`);
      }, []);


After making this change clear the browser console. Refresh the page. You should still see console.log() print the message of the initial render.
However, if you click a button to invoke a re-render, no more messages will be displayed in the console. You effectively told the effect to run ONCE by providing [] as a second argument.

[CONSOLE]
  The restaurant is Open
  // click of button does not print additional messages


If you provide a state variable, such as "status", in the dependency array the effect will run every time that specific state changes.
This can help limit how often the useEffect() hook runs.

      useEffect(()=>{
        console.log(`The restaurant is ${status ? 'Open', 'Closed'}.`);
      }, [status]);


The instructor does not mention that useEffect() can also create an infinite/endless loop and break your app if you attempt to update the state inside the useEffect hook.

  // DO NOT DO THIS - infinite loop
  useEffect(() => {
    toggleStatus();  // or if useState() it would be setStatus(!status)
  })

For a breakdown
1. The component renders
2. The effect runs after the render
   the state update triggers a re-render
2. The component immediately re-renders due to the state update in useEffect
3. The effect runs after the render
4. oh noooo!!! guess what happens!!!! over and over and over again.


